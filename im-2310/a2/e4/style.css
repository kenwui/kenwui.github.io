*{
  box-sizing: border-box;
  background-origin: border-box;
  margin: 0;
}

/* Basis for colour palette comes from 1bit Monitor Glow Palette by Polyducks */
/* https://lospec.com/palette-list/1bit-monitor-glow */
/* you're welcome to change the colours if you want or any of the other general page style */
:root{
  --col-01:#222323;
  --col-02:#f0f6f0;
  --col-03:#5252ff;
  --col-04:#b6e878;
  --col-05:#bcbdbc;
  --col-06:#6f6f6f;
  --col-07:#9fe44b;
  --border: 1px solid var(--col-02);
}

.video-player-wrapper{
  display: flex;
  flex-direction: column;
  width: 50%;
  margin: 0 auto;
}

/* becuase I want to overlay the play icon on the video they need to be in their own wrapper */
.video-element-wrapper{
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
}

#videoElement{
  width: 100%;
  grid-column: 1/2;
  grid-row: 1/2;
}

#videoPlayOverlay{
  width: 8rem;
  height: 8rem;
  grid-column: 1/2;
  grid-row: 1/2;
  justify-self: center;
  align-self: center;
  opacity: 0.6;
  display: none;
}

.video-controls-wrapper{
  display: flex;
  justify-content: center;
}
/* this overwrites the above display:flex - something which is then undone when the JS loads */
#controlsWrapper{
  display: none;
}

.video-control-button{
  width: 2rem;
  height: 2rem;
  padding: .1rem;
  border: none;
  cursor: pointer;
  /* creating drop shadow on the buttons makes the buttons much more noticeable and eye-catching and creates the opportunity
  to implement an engaging interactive element */
  background-color: var(--col-04);
  margin-left:2px;
  box-shadow: 2px 5px var(--col-01);
}
.video-control-button:hover{
  background-color: var(--col-05) !important; /* !impotant function ensures that the hover state is not cancelled by the javascript event*/
}
.video-control-button:active{
  /* creating 3D click effect by removing the box-shadow and margin values initially assigned to the buttons*/
  background-color: var(--col-06) !important;
  box-shadow: none !important;
  margin-left:0px !important;
}
.button-icon{
  pointer-events: none;
}

#playButton{
  background-image: url('./icons/play.svg');
}

#muteButton{
  background-image: url('./icons/mute.svg');
}

/* Thinking in terms of music apps, some of the most common features are the loop button and the buttons for fast forward and rewind.
e.g Spotify features the loop, rewind and fast forward buttons as part of the main suite of functions because thinking in terms of the user, 
these functions serve the most usefulness to the user */

/* I want to skip ahead to the good part of the song */
#forwardButton{
  background-image: url('./icons/fastForward.svg');
}

/* I skip too far ahead of the song and I want to go back to one part of the song */
#rewindButton {
  background-image: url('./icons/rewind.svg');
}

/* I like how this song sounds and I want to listen to it again */

#loopButton {
  background-image: url('./icons/loop.svg');
}

.video-progress-bar{
  /* Reset the default appearance */
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border: none;
  height: 2rem;
  flex-grow: 1;
  cursor: pointer;
  /* contrasting bright green background color so it is easily recognizable to the user where the progress bar is located
  and how much of the video duration has progressed*/
  background-color: var(--col-01);
  box-shadow: 0 1px 2px var(--col-07) inset;
  /*margin to create some white space between the button and video which makes the
  element easily distinguishable to the user*/
  margin-left: 5px;
  margin-top: 2px;
}
::-moz-progress-bar {
  background-color: var(--col-07);
}

::-webkit-progress-bar {
  background-color: var(--col-01);
  box-shadow: 0 1px 2px var(--col-07) inset;
}
::-webkit-progress-value {
  background-color: var(--col-07);
}

.timeline-loading{
  background-image: -moz-repeating-linear-gradient(45deg, var(--col-03) 0% 2%, transparent 2% 4%, red 4%);
  background-size: 200% 100%;
  animation: loadingAnimation 4s linear infinite;
}

@keyframes loadingAnimation {
  100%{
    background-position: 50% 0%;
  }
}